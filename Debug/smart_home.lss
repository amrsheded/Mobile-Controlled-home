
smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000ce4  00000000  00000000  00000c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000049a  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <main>
  64:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDirection>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"Register.h"
#include "DIO.h"
void DIO_SetPinDirection(u8 PortNumber, u8 PinNumber, u8 Direction)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2b 97       	sbiw	r28, 0x0b	; 11
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	6a 83       	std	Y+2, r22	; 0x02
  84:	4b 83       	std	Y+3, r20	; 0x03
	if(PortNumber==MY_PORTA)                                                      //DDRA
  86:	89 81       	ldd	r24, Y+1	; 0x01
  88:	88 23       	and	r24, r24
  8a:	c1 f5       	brne	.+112    	; 0xfc <DIO_SetPinDirection+0x90>
	{
		switch(Direction)
  8c:	8b 81       	ldd	r24, Y+3	; 0x03
  8e:	28 2f       	mov	r18, r24
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	3b 87       	std	Y+11, r19	; 0x0b
  94:	2a 87       	std	Y+10, r18	; 0x0a
  96:	8a 85       	ldd	r24, Y+10	; 0x0a
  98:	9b 85       	ldd	r25, Y+11	; 0x0b
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	31 f0       	breq	.+12     	; 0xaa <DIO_SetPinDirection+0x3e>
  9e:	2a 85       	ldd	r18, Y+10	; 0x0a
  a0:	3b 85       	ldd	r19, Y+11	; 0x0b
  a2:	21 30       	cpi	r18, 0x01	; 1
  a4:	31 05       	cpc	r19, r1
  a6:	b1 f0       	breq	.+44     	; 0xd4 <DIO_SetPinDirection+0x68>
  a8:	d9 c0       	rjmp	.+434    	; 0x25c <DIO_SetPinDirection+0x1f0>
		{
		case INPUT: CLR_BIT(Reg_DDRA,PinNumber); break;
  aa:	aa e3       	ldi	r26, 0x3A	; 58
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	ea e3       	ldi	r30, 0x3A	; 58
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	48 2f       	mov	r20, r24
  b6:	8a 81       	ldd	r24, Y+2	; 0x02
  b8:	28 2f       	mov	r18, r24
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 2e       	mov	r0, r18
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_SetPinDirection+0x5c>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_SetPinDirection+0x58>
  cc:	80 95       	com	r24
  ce:	84 23       	and	r24, r20
  d0:	8c 93       	st	X, r24
  d2:	c4 c0       	rjmp	.+392    	; 0x25c <DIO_SetPinDirection+0x1f0>
		case OUTPUT:SET_BIT(Reg_DDRA,PinNumber); break;
  d4:	aa e3       	ldi	r26, 0x3A	; 58
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	ea e3       	ldi	r30, 0x3A	; 58
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	48 2f       	mov	r20, r24
  e0:	8a 81       	ldd	r24, Y+2	; 0x02
  e2:	28 2f       	mov	r18, r24
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 2e       	mov	r0, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_SetPinDirection+0x86>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_SetPinDirection+0x82>
  f6:	84 2b       	or	r24, r20
  f8:	8c 93       	st	X, r24
  fa:	b0 c0       	rjmp	.+352    	; 0x25c <DIO_SetPinDirection+0x1f0>
		}

	}
	else if(PortNumber==MY_PORTB)                                                 //DDRB
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	c1 f5       	brne	.+112    	; 0x172 <DIO_SetPinDirection+0x106>
	{
		switch(Direction)
 102:	8b 81       	ldd	r24, Y+3	; 0x03
 104:	28 2f       	mov	r18, r24
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	39 87       	std	Y+9, r19	; 0x09
 10a:	28 87       	std	Y+8, r18	; 0x08
 10c:	88 85       	ldd	r24, Y+8	; 0x08
 10e:	99 85       	ldd	r25, Y+9	; 0x09
 110:	00 97       	sbiw	r24, 0x00	; 0
 112:	31 f0       	breq	.+12     	; 0x120 <DIO_SetPinDirection+0xb4>
 114:	28 85       	ldd	r18, Y+8	; 0x08
 116:	39 85       	ldd	r19, Y+9	; 0x09
 118:	21 30       	cpi	r18, 0x01	; 1
 11a:	31 05       	cpc	r19, r1
 11c:	b1 f0       	breq	.+44     	; 0x14a <DIO_SetPinDirection+0xde>
 11e:	9e c0       	rjmp	.+316    	; 0x25c <DIO_SetPinDirection+0x1f0>
		{
		case INPUT: CLR_BIT(Reg_DDRB,PinNumber); break;
 120:	a7 e3       	ldi	r26, 0x37	; 55
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e7 e3       	ldi	r30, 0x37	; 55
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	48 2f       	mov	r20, r24
 12c:	8a 81       	ldd	r24, Y+2	; 0x02
 12e:	28 2f       	mov	r18, r24
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 2e       	mov	r0, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SetPinDirection+0xd2>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	0a 94       	dec	r0
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SetPinDirection+0xce>
 142:	80 95       	com	r24
 144:	84 23       	and	r24, r20
 146:	8c 93       	st	X, r24
 148:	89 c0       	rjmp	.+274    	; 0x25c <DIO_SetPinDirection+0x1f0>
		case OUTPUT:SET_BIT(Reg_DDRB,PinNumber); break;
 14a:	a7 e3       	ldi	r26, 0x37	; 55
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	e7 e3       	ldi	r30, 0x37	; 55
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	48 2f       	mov	r20, r24
 156:	8a 81       	ldd	r24, Y+2	; 0x02
 158:	28 2f       	mov	r18, r24
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 2e       	mov	r0, r18
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_SetPinDirection+0xfc>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	0a 94       	dec	r0
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_SetPinDirection+0xf8>
 16c:	84 2b       	or	r24, r20
 16e:	8c 93       	st	X, r24
 170:	75 c0       	rjmp	.+234    	; 0x25c <DIO_SetPinDirection+0x1f0>
		}

	}
	else if(PortNumber==MY_PORTC)                                                  //DDRC
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	c1 f5       	brne	.+112    	; 0x1e8 <DIO_SetPinDirection+0x17c>
	{
		switch(Direction)
 178:	8b 81       	ldd	r24, Y+3	; 0x03
 17a:	28 2f       	mov	r18, r24
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	3f 83       	std	Y+7, r19	; 0x07
 180:	2e 83       	std	Y+6, r18	; 0x06
 182:	8e 81       	ldd	r24, Y+6	; 0x06
 184:	9f 81       	ldd	r25, Y+7	; 0x07
 186:	00 97       	sbiw	r24, 0x00	; 0
 188:	31 f0       	breq	.+12     	; 0x196 <DIO_SetPinDirection+0x12a>
 18a:	2e 81       	ldd	r18, Y+6	; 0x06
 18c:	3f 81       	ldd	r19, Y+7	; 0x07
 18e:	21 30       	cpi	r18, 0x01	; 1
 190:	31 05       	cpc	r19, r1
 192:	b1 f0       	breq	.+44     	; 0x1c0 <DIO_SetPinDirection+0x154>
 194:	63 c0       	rjmp	.+198    	; 0x25c <DIO_SetPinDirection+0x1f0>
		{
		case INPUT: CLR_BIT(Reg_DDRC,PinNumber); break;
 196:	a4 e3       	ldi	r26, 0x34	; 52
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	e4 e3       	ldi	r30, 0x34	; 52
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	48 2f       	mov	r20, r24
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	28 2f       	mov	r18, r24
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 2e       	mov	r0, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_SetPinDirection+0x148>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_SetPinDirection+0x144>
 1b8:	80 95       	com	r24
 1ba:	84 23       	and	r24, r20
 1bc:	8c 93       	st	X, r24
 1be:	4e c0       	rjmp	.+156    	; 0x25c <DIO_SetPinDirection+0x1f0>
		case OUTPUT:SET_BIT(Reg_DDRC,PinNumber); break;
 1c0:	a4 e3       	ldi	r26, 0x34	; 52
 1c2:	b0 e0       	ldi	r27, 0x00	; 0
 1c4:	e4 e3       	ldi	r30, 0x34	; 52
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	48 2f       	mov	r20, r24
 1cc:	8a 81       	ldd	r24, Y+2	; 0x02
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 2e       	mov	r0, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_SetPinDirection+0x172>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_SetPinDirection+0x16e>
 1e2:	84 2b       	or	r24, r20
 1e4:	8c 93       	st	X, r24
 1e6:	3a c0       	rjmp	.+116    	; 0x25c <DIO_SetPinDirection+0x1f0>
		}

	}
	else if(PortNumber==MY_PORTD)                                                   //DDRD
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	b9 f5       	brne	.+110    	; 0x25c <DIO_SetPinDirection+0x1f0>
	{
		switch(Direction)
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	3d 83       	std	Y+5, r19	; 0x05
 1f6:	2c 83       	std	Y+4, r18	; 0x04
 1f8:	8c 81       	ldd	r24, Y+4	; 0x04
 1fa:	9d 81       	ldd	r25, Y+5	; 0x05
 1fc:	00 97       	sbiw	r24, 0x00	; 0
 1fe:	31 f0       	breq	.+12     	; 0x20c <DIO_SetPinDirection+0x1a0>
 200:	2c 81       	ldd	r18, Y+4	; 0x04
 202:	3d 81       	ldd	r19, Y+5	; 0x05
 204:	21 30       	cpi	r18, 0x01	; 1
 206:	31 05       	cpc	r19, r1
 208:	b1 f0       	breq	.+44     	; 0x236 <DIO_SetPinDirection+0x1ca>
 20a:	28 c0       	rjmp	.+80     	; 0x25c <DIO_SetPinDirection+0x1f0>
		{
		case INPUT: CLR_BIT(Reg_DDRD,PinNumber); break;
 20c:	a1 e3       	ldi	r26, 0x31	; 49
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	e1 e3       	ldi	r30, 0x31	; 49
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	48 2f       	mov	r20, r24
 218:	8a 81       	ldd	r24, Y+2	; 0x02
 21a:	28 2f       	mov	r18, r24
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 2e       	mov	r0, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_SetPinDirection+0x1be>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_SetPinDirection+0x1ba>
 22e:	80 95       	com	r24
 230:	84 23       	and	r24, r20
 232:	8c 93       	st	X, r24
 234:	13 c0       	rjmp	.+38     	; 0x25c <DIO_SetPinDirection+0x1f0>
		case OUTPUT:SET_BIT(Reg_DDRD,PinNumber); break;
 236:	a1 e3       	ldi	r26, 0x31	; 49
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	e1 e3       	ldi	r30, 0x31	; 49
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	48 2f       	mov	r20, r24
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	28 2f       	mov	r18, r24
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 2e       	mov	r0, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_SetPinDirection+0x1e8>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_SetPinDirection+0x1e4>
 258:	84 2b       	or	r24, r20
 25a:	8c 93       	st	X, r24
		}

	}

}
 25c:	2b 96       	adiw	r28, 0x0b	; 11
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	f8 94       	cli
 262:	de bf       	out	0x3e, r29	; 62
 264:	0f be       	out	0x3f, r0	; 63
 266:	cd bf       	out	0x3d, r28	; 61
 268:	cf 91       	pop	r28
 26a:	df 91       	pop	r29
 26c:	08 95       	ret

0000026e <DIO_SetPinValue>:


void DIO_SetPinValue(u8 PortNumber,u8 PinNumber,u8 PinValue)
{
 26e:	df 93       	push	r29
 270:	cf 93       	push	r28
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	2b 97       	sbiw	r28, 0x0b	; 11
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	de bf       	out	0x3e, r29	; 62
 27e:	0f be       	out	0x3f, r0	; 63
 280:	cd bf       	out	0x3d, r28	; 61
 282:	89 83       	std	Y+1, r24	; 0x01
 284:	6a 83       	std	Y+2, r22	; 0x02
 286:	4b 83       	std	Y+3, r20	; 0x03
	if(PortNumber==MY_PORTA)                                                         //PORTA
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	88 23       	and	r24, r24
 28c:	c1 f5       	brne	.+112    	; 0x2fe <DIO_SetPinValue+0x90>
		{
			switch(PinValue)
 28e:	8b 81       	ldd	r24, Y+3	; 0x03
 290:	28 2f       	mov	r18, r24
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	3b 87       	std	Y+11, r19	; 0x0b
 296:	2a 87       	std	Y+10, r18	; 0x0a
 298:	8a 85       	ldd	r24, Y+10	; 0x0a
 29a:	9b 85       	ldd	r25, Y+11	; 0x0b
 29c:	00 97       	sbiw	r24, 0x00	; 0
 29e:	31 f0       	breq	.+12     	; 0x2ac <DIO_SetPinValue+0x3e>
 2a0:	2a 85       	ldd	r18, Y+10	; 0x0a
 2a2:	3b 85       	ldd	r19, Y+11	; 0x0b
 2a4:	21 30       	cpi	r18, 0x01	; 1
 2a6:	31 05       	cpc	r19, r1
 2a8:	b1 f0       	breq	.+44     	; 0x2d6 <DIO_SetPinValue+0x68>
 2aa:	d9 c0       	rjmp	.+434    	; 0x45e <DIO_SetPinValue+0x1f0>
			{
			case LOW: CLR_BIT(Reg_PORTA,PinNumber); break;
 2ac:	ab e3       	ldi	r26, 0x3B	; 59
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	eb e3       	ldi	r30, 0x3B	; 59
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	48 2f       	mov	r20, r24
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	28 2f       	mov	r18, r24
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 2e       	mov	r0, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_SetPinValue+0x5c>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	0a 94       	dec	r0
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_SetPinValue+0x58>
 2ce:	80 95       	com	r24
 2d0:	84 23       	and	r24, r20
 2d2:	8c 93       	st	X, r24
 2d4:	c4 c0       	rjmp	.+392    	; 0x45e <DIO_SetPinValue+0x1f0>
			case HIGH:SET_BIT(Reg_PORTA,PinNumber); break;
 2d6:	ab e3       	ldi	r26, 0x3B	; 59
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	eb e3       	ldi	r30, 0x3B	; 59
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	48 2f       	mov	r20, r24
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 2e       	mov	r0, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_SetPinValue+0x86>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_SetPinValue+0x82>
 2f8:	84 2b       	or	r24, r20
 2fa:	8c 93       	st	X, r24
 2fc:	b0 c0       	rjmp	.+352    	; 0x45e <DIO_SetPinValue+0x1f0>
			}

		}
		else if(PortNumber==MY_PORTB)                                                 //PORTB
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	c1 f5       	brne	.+112    	; 0x374 <DIO_SetPinValue+0x106>
		{
			switch(PinValue)
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	28 2f       	mov	r18, r24
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	39 87       	std	Y+9, r19	; 0x09
 30c:	28 87       	std	Y+8, r18	; 0x08
 30e:	88 85       	ldd	r24, Y+8	; 0x08
 310:	99 85       	ldd	r25, Y+9	; 0x09
 312:	00 97       	sbiw	r24, 0x00	; 0
 314:	31 f0       	breq	.+12     	; 0x322 <DIO_SetPinValue+0xb4>
 316:	28 85       	ldd	r18, Y+8	; 0x08
 318:	39 85       	ldd	r19, Y+9	; 0x09
 31a:	21 30       	cpi	r18, 0x01	; 1
 31c:	31 05       	cpc	r19, r1
 31e:	b1 f0       	breq	.+44     	; 0x34c <DIO_SetPinValue+0xde>
 320:	9e c0       	rjmp	.+316    	; 0x45e <DIO_SetPinValue+0x1f0>
			{
			case LOW: CLR_BIT(Reg_PORTB,PinNumber); break;
 322:	a8 e3       	ldi	r26, 0x38	; 56
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	e8 e3       	ldi	r30, 0x38	; 56
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	48 2f       	mov	r20, r24
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 2e       	mov	r0, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_SetPinValue+0xd2>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_SetPinValue+0xce>
 344:	80 95       	com	r24
 346:	84 23       	and	r24, r20
 348:	8c 93       	st	X, r24
 34a:	89 c0       	rjmp	.+274    	; 0x45e <DIO_SetPinValue+0x1f0>
			case HIGH:SET_BIT(Reg_PORTB,PinNumber); break;
 34c:	a8 e3       	ldi	r26, 0x38	; 56
 34e:	b0 e0       	ldi	r27, 0x00	; 0
 350:	e8 e3       	ldi	r30, 0x38	; 56
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	48 2f       	mov	r20, r24
 358:	8a 81       	ldd	r24, Y+2	; 0x02
 35a:	28 2f       	mov	r18, r24
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 2e       	mov	r0, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_SetPinValue+0xfc>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	0a 94       	dec	r0
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_SetPinValue+0xf8>
 36e:	84 2b       	or	r24, r20
 370:	8c 93       	st	X, r24
 372:	75 c0       	rjmp	.+234    	; 0x45e <DIO_SetPinValue+0x1f0>
			}

		}
		else if(PortNumber==MY_PORTC)                                                 //PORTC
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	82 30       	cpi	r24, 0x02	; 2
 378:	c1 f5       	brne	.+112    	; 0x3ea <DIO_SetPinValue+0x17c>
		{
			switch(PinValue)
 37a:	8b 81       	ldd	r24, Y+3	; 0x03
 37c:	28 2f       	mov	r18, r24
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	3f 83       	std	Y+7, r19	; 0x07
 382:	2e 83       	std	Y+6, r18	; 0x06
 384:	8e 81       	ldd	r24, Y+6	; 0x06
 386:	9f 81       	ldd	r25, Y+7	; 0x07
 388:	00 97       	sbiw	r24, 0x00	; 0
 38a:	31 f0       	breq	.+12     	; 0x398 <DIO_SetPinValue+0x12a>
 38c:	2e 81       	ldd	r18, Y+6	; 0x06
 38e:	3f 81       	ldd	r19, Y+7	; 0x07
 390:	21 30       	cpi	r18, 0x01	; 1
 392:	31 05       	cpc	r19, r1
 394:	b1 f0       	breq	.+44     	; 0x3c2 <DIO_SetPinValue+0x154>
 396:	63 c0       	rjmp	.+198    	; 0x45e <DIO_SetPinValue+0x1f0>
			{
			case LOW: CLR_BIT(Reg_PORTC,PinNumber); break;
 398:	a5 e3       	ldi	r26, 0x35	; 53
 39a:	b0 e0       	ldi	r27, 0x00	; 0
 39c:	e5 e3       	ldi	r30, 0x35	; 53
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	48 2f       	mov	r20, r24
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 2e       	mov	r0, r18
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_SetPinValue+0x148>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	0a 94       	dec	r0
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_SetPinValue+0x144>
 3ba:	80 95       	com	r24
 3bc:	84 23       	and	r24, r20
 3be:	8c 93       	st	X, r24
 3c0:	4e c0       	rjmp	.+156    	; 0x45e <DIO_SetPinValue+0x1f0>
			case HIGH:SET_BIT(Reg_PORTC,PinNumber); break;
 3c2:	a5 e3       	ldi	r26, 0x35	; 53
 3c4:	b0 e0       	ldi	r27, 0x00	; 0
 3c6:	e5 e3       	ldi	r30, 0x35	; 53
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	48 2f       	mov	r20, r24
 3ce:	8a 81       	ldd	r24, Y+2	; 0x02
 3d0:	28 2f       	mov	r18, r24
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 2e       	mov	r0, r18
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_SetPinValue+0x172>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	0a 94       	dec	r0
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_SetPinValue+0x16e>
 3e4:	84 2b       	or	r24, r20
 3e6:	8c 93       	st	X, r24
 3e8:	3a c0       	rjmp	.+116    	; 0x45e <DIO_SetPinValue+0x1f0>
			}

		}
		else if(PortNumber==MY_PORTD)                                                 //PORTD
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	83 30       	cpi	r24, 0x03	; 3
 3ee:	b9 f5       	brne	.+110    	; 0x45e <DIO_SetPinValue+0x1f0>
		{
			switch(PinValue)
 3f0:	8b 81       	ldd	r24, Y+3	; 0x03
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	3d 83       	std	Y+5, r19	; 0x05
 3f8:	2c 83       	std	Y+4, r18	; 0x04
 3fa:	8c 81       	ldd	r24, Y+4	; 0x04
 3fc:	9d 81       	ldd	r25, Y+5	; 0x05
 3fe:	00 97       	sbiw	r24, 0x00	; 0
 400:	31 f0       	breq	.+12     	; 0x40e <DIO_SetPinValue+0x1a0>
 402:	2c 81       	ldd	r18, Y+4	; 0x04
 404:	3d 81       	ldd	r19, Y+5	; 0x05
 406:	21 30       	cpi	r18, 0x01	; 1
 408:	31 05       	cpc	r19, r1
 40a:	b1 f0       	breq	.+44     	; 0x438 <DIO_SetPinValue+0x1ca>
 40c:	28 c0       	rjmp	.+80     	; 0x45e <DIO_SetPinValue+0x1f0>
			{
			case LOW: CLR_BIT(Reg_PORTD,PinNumber); break;
 40e:	a2 e3       	ldi	r26, 0x32	; 50
 410:	b0 e0       	ldi	r27, 0x00	; 0
 412:	e2 e3       	ldi	r30, 0x32	; 50
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	48 2f       	mov	r20, r24
 41a:	8a 81       	ldd	r24, Y+2	; 0x02
 41c:	28 2f       	mov	r18, r24
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 2e       	mov	r0, r18
 426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_SetPinValue+0x1be>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	0a 94       	dec	r0
 42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_SetPinValue+0x1ba>
 430:	80 95       	com	r24
 432:	84 23       	and	r24, r20
 434:	8c 93       	st	X, r24
 436:	13 c0       	rjmp	.+38     	; 0x45e <DIO_SetPinValue+0x1f0>
			case HIGH:SET_BIT(Reg_PORTD,PinNumber); break;
 438:	a2 e3       	ldi	r26, 0x32	; 50
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	e2 e3       	ldi	r30, 0x32	; 50
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	48 2f       	mov	r20, r24
 444:	8a 81       	ldd	r24, Y+2	; 0x02
 446:	28 2f       	mov	r18, r24
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 2e       	mov	r0, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <DIO_SetPinValue+0x1e8>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <DIO_SetPinValue+0x1e4>
 45a:	84 2b       	or	r24, r20
 45c:	8c 93       	st	X, r24
			}

		}
}
 45e:	2b 96       	adiw	r28, 0x0b	; 11
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	f8 94       	cli
 464:	de bf       	out	0x3e, r29	; 62
 466:	0f be       	out	0x3f, r0	; 63
 468:	cd bf       	out	0x3d, r28	; 61
 46a:	cf 91       	pop	r28
 46c:	df 91       	pop	r29
 46e:	08 95       	ret

00000470 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 PortNumber,u8 PinNumber)
{
 470:	df 93       	push	r29
 472:	cf 93       	push	r28
 474:	00 d0       	rcall	.+0      	; 0x476 <DIO_GetPinValue+0x6>
 476:	00 d0       	rcall	.+0      	; 0x478 <DIO_GetPinValue+0x8>
 478:	0f 92       	push	r0
 47a:	cd b7       	in	r28, 0x3d	; 61
 47c:	de b7       	in	r29, 0x3e	; 62
 47e:	8a 83       	std	Y+2, r24	; 0x02
 480:	6b 83       	std	Y+3, r22	; 0x03
	u8 retresult;
	switch(PortNumber)
 482:	8a 81       	ldd	r24, Y+2	; 0x02
 484:	28 2f       	mov	r18, r24
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	3d 83       	std	Y+5, r19	; 0x05
 48a:	2c 83       	std	Y+4, r18	; 0x04
 48c:	4c 81       	ldd	r20, Y+4	; 0x04
 48e:	5d 81       	ldd	r21, Y+5	; 0x05
 490:	41 30       	cpi	r20, 0x01	; 1
 492:	51 05       	cpc	r21, r1
 494:	41 f1       	breq	.+80     	; 0x4e6 <DIO_GetPinValue+0x76>
 496:	8c 81       	ldd	r24, Y+4	; 0x04
 498:	9d 81       	ldd	r25, Y+5	; 0x05
 49a:	82 30       	cpi	r24, 0x02	; 2
 49c:	91 05       	cpc	r25, r1
 49e:	34 f4       	brge	.+12     	; 0x4ac <DIO_GetPinValue+0x3c>
 4a0:	2c 81       	ldd	r18, Y+4	; 0x04
 4a2:	3d 81       	ldd	r19, Y+5	; 0x05
 4a4:	21 15       	cp	r18, r1
 4a6:	31 05       	cpc	r19, r1
 4a8:	61 f0       	breq	.+24     	; 0x4c2 <DIO_GetPinValue+0x52>
 4aa:	52 c0       	rjmp	.+164    	; 0x550 <DIO_GetPinValue+0xe0>
 4ac:	4c 81       	ldd	r20, Y+4	; 0x04
 4ae:	5d 81       	ldd	r21, Y+5	; 0x05
 4b0:	42 30       	cpi	r20, 0x02	; 2
 4b2:	51 05       	cpc	r21, r1
 4b4:	51 f1       	breq	.+84     	; 0x50a <DIO_GetPinValue+0x9a>
 4b6:	8c 81       	ldd	r24, Y+4	; 0x04
 4b8:	9d 81       	ldd	r25, Y+5	; 0x05
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	91 05       	cpc	r25, r1
 4be:	b9 f1       	breq	.+110    	; 0x52e <DIO_GetPinValue+0xbe>
 4c0:	47 c0       	rjmp	.+142    	; 0x550 <DIO_GetPinValue+0xe0>
	{
	case MY_PORTA: retresult=GET_BIT(Reg_PINA,PinNumber); break;
 4c2:	e9 e3       	ldi	r30, 0x39	; 57
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	88 2f       	mov	r24, r24
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	a9 01       	movw	r20, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_GetPinValue+0x6a>
 4d6:	55 95       	asr	r21
 4d8:	47 95       	ror	r20
 4da:	8a 95       	dec	r24
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_GetPinValue+0x66>
 4de:	ca 01       	movw	r24, r20
 4e0:	81 70       	andi	r24, 0x01	; 1
 4e2:	89 83       	std	Y+1, r24	; 0x01
 4e4:	35 c0       	rjmp	.+106    	; 0x550 <DIO_GetPinValue+0xe0>
	case MY_PORTB: retresult=GET_BIT(Reg_PINB,PinNumber); break;
 4e6:	e6 e3       	ldi	r30, 0x36	; 54
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	28 2f       	mov	r18, r24
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	88 2f       	mov	r24, r24
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	a9 01       	movw	r20, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_GetPinValue+0x8e>
 4fa:	55 95       	asr	r21
 4fc:	47 95       	ror	r20
 4fe:	8a 95       	dec	r24
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_GetPinValue+0x8a>
 502:	ca 01       	movw	r24, r20
 504:	81 70       	andi	r24, 0x01	; 1
 506:	89 83       	std	Y+1, r24	; 0x01
 508:	23 c0       	rjmp	.+70     	; 0x550 <DIO_GetPinValue+0xe0>
	case MY_PORTC: retresult=GET_BIT(Reg_PINC,PinNumber); break;
 50a:	e3 e3       	ldi	r30, 0x33	; 51
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	28 2f       	mov	r18, r24
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	8b 81       	ldd	r24, Y+3	; 0x03
 516:	88 2f       	mov	r24, r24
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	a9 01       	movw	r20, r18
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_GetPinValue+0xb2>
 51e:	55 95       	asr	r21
 520:	47 95       	ror	r20
 522:	8a 95       	dec	r24
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_GetPinValue+0xae>
 526:	ca 01       	movw	r24, r20
 528:	81 70       	andi	r24, 0x01	; 1
 52a:	89 83       	std	Y+1, r24	; 0x01
 52c:	11 c0       	rjmp	.+34     	; 0x550 <DIO_GetPinValue+0xe0>
	case MY_PORTD: retresult=GET_BIT(Reg_PIND,PinNumber); break;
 52e:	e0 e3       	ldi	r30, 0x30	; 48
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	28 2f       	mov	r18, r24
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	88 2f       	mov	r24, r24
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	a9 01       	movw	r20, r18
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_GetPinValue+0xd6>
 542:	55 95       	asr	r21
 544:	47 95       	ror	r20
 546:	8a 95       	dec	r24
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_GetPinValue+0xd2>
 54a:	ca 01       	movw	r24, r20
 54c:	81 70       	andi	r24, 0x01	; 1
 54e:	89 83       	std	Y+1, r24	; 0x01
	}
return retresult ;
 550:	89 81       	ldd	r24, Y+1	; 0x01
}
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	0f 90       	pop	r0
 55c:	cf 91       	pop	r28
 55e:	df 91       	pop	r29
 560:	08 95       	ret

00000562 <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 PortNumber,u8 PortDirection)
{
 562:	df 93       	push	r29
 564:	cf 93       	push	r28
 566:	00 d0       	rcall	.+0      	; 0x568 <DIO_SetPortDirection+0x6>
 568:	00 d0       	rcall	.+0      	; 0x56a <DIO_SetPortDirection+0x8>
 56a:	00 d0       	rcall	.+0      	; 0x56c <DIO_SetPortDirection+0xa>
 56c:	cd b7       	in	r28, 0x3d	; 61
 56e:	de b7       	in	r29, 0x3e	; 62
 570:	89 83       	std	Y+1, r24	; 0x01
 572:	6a 83       	std	Y+2, r22	; 0x02
	if(PortDirection==INPUT)
 574:	8a 81       	ldd	r24, Y+2	; 0x02
 576:	88 23       	and	r24, r24
 578:	79 f5       	brne	.+94     	; 0x5d8 <DIO_SetPortDirection+0x76>
	{
		switch(PortNumber)
 57a:	89 81       	ldd	r24, Y+1	; 0x01
 57c:	28 2f       	mov	r18, r24
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	3e 83       	std	Y+6, r19	; 0x06
 582:	2d 83       	std	Y+5, r18	; 0x05
 584:	8d 81       	ldd	r24, Y+5	; 0x05
 586:	9e 81       	ldd	r25, Y+6	; 0x06
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	91 05       	cpc	r25, r1
 58c:	c9 f0       	breq	.+50     	; 0x5c0 <DIO_SetPortDirection+0x5e>
 58e:	2d 81       	ldd	r18, Y+5	; 0x05
 590:	3e 81       	ldd	r19, Y+6	; 0x06
 592:	22 30       	cpi	r18, 0x02	; 2
 594:	31 05       	cpc	r19, r1
 596:	2c f4       	brge	.+10     	; 0x5a2 <DIO_SetPortDirection+0x40>
 598:	8d 81       	ldd	r24, Y+5	; 0x05
 59a:	9e 81       	ldd	r25, Y+6	; 0x06
 59c:	00 97       	sbiw	r24, 0x00	; 0
 59e:	61 f0       	breq	.+24     	; 0x5b8 <DIO_SetPortDirection+0x56>
 5a0:	50 c0       	rjmp	.+160    	; 0x642 <DIO_SetPortDirection+0xe0>
 5a2:	2d 81       	ldd	r18, Y+5	; 0x05
 5a4:	3e 81       	ldd	r19, Y+6	; 0x06
 5a6:	22 30       	cpi	r18, 0x02	; 2
 5a8:	31 05       	cpc	r19, r1
 5aa:	71 f0       	breq	.+28     	; 0x5c8 <DIO_SetPortDirection+0x66>
 5ac:	8d 81       	ldd	r24, Y+5	; 0x05
 5ae:	9e 81       	ldd	r25, Y+6	; 0x06
 5b0:	83 30       	cpi	r24, 0x03	; 3
 5b2:	91 05       	cpc	r25, r1
 5b4:	69 f0       	breq	.+26     	; 0x5d0 <DIO_SetPortDirection+0x6e>
 5b6:	45 c0       	rjmp	.+138    	; 0x642 <DIO_SetPortDirection+0xe0>
		{
		case MY_PORTA:  Reg_DDRA=0x00;  break;
 5b8:	ea e3       	ldi	r30, 0x3A	; 58
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	10 82       	st	Z, r1
 5be:	41 c0       	rjmp	.+130    	; 0x642 <DIO_SetPortDirection+0xe0>
		case MY_PORTB:  Reg_DDRB=0x00;  break;
 5c0:	e7 e3       	ldi	r30, 0x37	; 55
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	10 82       	st	Z, r1
 5c6:	3d c0       	rjmp	.+122    	; 0x642 <DIO_SetPortDirection+0xe0>
		case MY_PORTC:  Reg_DDRC=0x00;  break;
 5c8:	e4 e3       	ldi	r30, 0x34	; 52
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	10 82       	st	Z, r1
 5ce:	39 c0       	rjmp	.+114    	; 0x642 <DIO_SetPortDirection+0xe0>
		case MY_PORTD:  Reg_DDRD=0x00;  break;
 5d0:	e1 e3       	ldi	r30, 0x31	; 49
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	10 82       	st	Z, r1
 5d6:	35 c0       	rjmp	.+106    	; 0x642 <DIO_SetPortDirection+0xe0>
		}
	}
	else if(PortDirection==OUTPUT)
 5d8:	8a 81       	ldd	r24, Y+2	; 0x02
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	91 f5       	brne	.+100    	; 0x642 <DIO_SetPortDirection+0xe0>
	{
		switch(PortNumber)
 5de:	89 81       	ldd	r24, Y+1	; 0x01
 5e0:	28 2f       	mov	r18, r24
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	3c 83       	std	Y+4, r19	; 0x04
 5e6:	2b 83       	std	Y+3, r18	; 0x03
 5e8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ea:	9c 81       	ldd	r25, Y+4	; 0x04
 5ec:	81 30       	cpi	r24, 0x01	; 1
 5ee:	91 05       	cpc	r25, r1
 5f0:	d1 f0       	breq	.+52     	; 0x626 <DIO_SetPortDirection+0xc4>
 5f2:	2b 81       	ldd	r18, Y+3	; 0x03
 5f4:	3c 81       	ldd	r19, Y+4	; 0x04
 5f6:	22 30       	cpi	r18, 0x02	; 2
 5f8:	31 05       	cpc	r19, r1
 5fa:	2c f4       	brge	.+10     	; 0x606 <DIO_SetPortDirection+0xa4>
 5fc:	8b 81       	ldd	r24, Y+3	; 0x03
 5fe:	9c 81       	ldd	r25, Y+4	; 0x04
 600:	00 97       	sbiw	r24, 0x00	; 0
 602:	61 f0       	breq	.+24     	; 0x61c <DIO_SetPortDirection+0xba>
 604:	1e c0       	rjmp	.+60     	; 0x642 <DIO_SetPortDirection+0xe0>
 606:	2b 81       	ldd	r18, Y+3	; 0x03
 608:	3c 81       	ldd	r19, Y+4	; 0x04
 60a:	22 30       	cpi	r18, 0x02	; 2
 60c:	31 05       	cpc	r19, r1
 60e:	81 f0       	breq	.+32     	; 0x630 <DIO_SetPortDirection+0xce>
 610:	8b 81       	ldd	r24, Y+3	; 0x03
 612:	9c 81       	ldd	r25, Y+4	; 0x04
 614:	83 30       	cpi	r24, 0x03	; 3
 616:	91 05       	cpc	r25, r1
 618:	81 f0       	breq	.+32     	; 0x63a <DIO_SetPortDirection+0xd8>
 61a:	13 c0       	rjmp	.+38     	; 0x642 <DIO_SetPortDirection+0xe0>
		{
		case MY_PORTA:  Reg_DDRA=0xff;  break;
 61c:	ea e3       	ldi	r30, 0x3A	; 58
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	8f ef       	ldi	r24, 0xFF	; 255
 622:	80 83       	st	Z, r24
 624:	0e c0       	rjmp	.+28     	; 0x642 <DIO_SetPortDirection+0xe0>
		case MY_PORTB:  Reg_DDRB=0xff;  break;
 626:	e7 e3       	ldi	r30, 0x37	; 55
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	8f ef       	ldi	r24, 0xFF	; 255
 62c:	80 83       	st	Z, r24
 62e:	09 c0       	rjmp	.+18     	; 0x642 <DIO_SetPortDirection+0xe0>
		case MY_PORTC:  Reg_DDRC=0xff;  break;
 630:	e4 e3       	ldi	r30, 0x34	; 52
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	8f ef       	ldi	r24, 0xFF	; 255
 636:	80 83       	st	Z, r24
 638:	04 c0       	rjmp	.+8      	; 0x642 <DIO_SetPortDirection+0xe0>
		case MY_PORTD:  Reg_DDRD=0xff;  break;
 63a:	e1 e3       	ldi	r30, 0x31	; 49
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	8f ef       	ldi	r24, 0xFF	; 255
 640:	80 83       	st	Z, r24
		}
	}
}
 642:	26 96       	adiw	r28, 0x06	; 6
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	f8 94       	cli
 648:	de bf       	out	0x3e, r29	; 62
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	cd bf       	out	0x3d, r28	; 61
 64e:	cf 91       	pop	r28
 650:	df 91       	pop	r29
 652:	08 95       	ret

00000654 <DIO_SetPortValue>:

void DIO_SetPortValue (u8 PortNumber, u8 PortValue)
{
 654:	df 93       	push	r29
 656:	cf 93       	push	r28
 658:	00 d0       	rcall	.+0      	; 0x65a <DIO_SetPortValue+0x6>
 65a:	00 d0       	rcall	.+0      	; 0x65c <DIO_SetPortValue+0x8>
 65c:	00 d0       	rcall	.+0      	; 0x65e <DIO_SetPortValue+0xa>
 65e:	cd b7       	in	r28, 0x3d	; 61
 660:	de b7       	in	r29, 0x3e	; 62
 662:	89 83       	std	Y+1, r24	; 0x01
 664:	6a 83       	std	Y+2, r22	; 0x02
	if(PortValue==LOW)
 666:	8a 81       	ldd	r24, Y+2	; 0x02
 668:	88 23       	and	r24, r24
 66a:	79 f5       	brne	.+94     	; 0x6ca <DIO_SetPortValue+0x76>
		{
			switch(PortNumber)
 66c:	89 81       	ldd	r24, Y+1	; 0x01
 66e:	28 2f       	mov	r18, r24
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	3e 83       	std	Y+6, r19	; 0x06
 674:	2d 83       	std	Y+5, r18	; 0x05
 676:	8d 81       	ldd	r24, Y+5	; 0x05
 678:	9e 81       	ldd	r25, Y+6	; 0x06
 67a:	81 30       	cpi	r24, 0x01	; 1
 67c:	91 05       	cpc	r25, r1
 67e:	c9 f0       	breq	.+50     	; 0x6b2 <DIO_SetPortValue+0x5e>
 680:	2d 81       	ldd	r18, Y+5	; 0x05
 682:	3e 81       	ldd	r19, Y+6	; 0x06
 684:	22 30       	cpi	r18, 0x02	; 2
 686:	31 05       	cpc	r19, r1
 688:	2c f4       	brge	.+10     	; 0x694 <DIO_SetPortValue+0x40>
 68a:	8d 81       	ldd	r24, Y+5	; 0x05
 68c:	9e 81       	ldd	r25, Y+6	; 0x06
 68e:	00 97       	sbiw	r24, 0x00	; 0
 690:	61 f0       	breq	.+24     	; 0x6aa <DIO_SetPortValue+0x56>
 692:	50 c0       	rjmp	.+160    	; 0x734 <DIO_SetPortValue+0xe0>
 694:	2d 81       	ldd	r18, Y+5	; 0x05
 696:	3e 81       	ldd	r19, Y+6	; 0x06
 698:	22 30       	cpi	r18, 0x02	; 2
 69a:	31 05       	cpc	r19, r1
 69c:	71 f0       	breq	.+28     	; 0x6ba <DIO_SetPortValue+0x66>
 69e:	8d 81       	ldd	r24, Y+5	; 0x05
 6a0:	9e 81       	ldd	r25, Y+6	; 0x06
 6a2:	83 30       	cpi	r24, 0x03	; 3
 6a4:	91 05       	cpc	r25, r1
 6a6:	69 f0       	breq	.+26     	; 0x6c2 <DIO_SetPortValue+0x6e>
 6a8:	45 c0       	rjmp	.+138    	; 0x734 <DIO_SetPortValue+0xe0>
			{
			case MY_PORTA: Reg_PORTA=0x00;  break;
 6aa:	eb e3       	ldi	r30, 0x3B	; 59
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	10 82       	st	Z, r1
 6b0:	41 c0       	rjmp	.+130    	; 0x734 <DIO_SetPortValue+0xe0>
			case MY_PORTB: Reg_PORTB=0x00;  break;
 6b2:	e8 e3       	ldi	r30, 0x38	; 56
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	10 82       	st	Z, r1
 6b8:	3d c0       	rjmp	.+122    	; 0x734 <DIO_SetPortValue+0xe0>
			case MY_PORTC: Reg_PORTC=0x00;  break;
 6ba:	e5 e3       	ldi	r30, 0x35	; 53
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	10 82       	st	Z, r1
 6c0:	39 c0       	rjmp	.+114    	; 0x734 <DIO_SetPortValue+0xe0>
			case MY_PORTD: Reg_PORTD=0x00;  break;
 6c2:	e2 e3       	ldi	r30, 0x32	; 50
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	10 82       	st	Z, r1
 6c8:	35 c0       	rjmp	.+106    	; 0x734 <DIO_SetPortValue+0xe0>
			}
		}
	else if(PortValue==HIGH)
 6ca:	8a 81       	ldd	r24, Y+2	; 0x02
 6cc:	81 30       	cpi	r24, 0x01	; 1
 6ce:	91 f5       	brne	.+100    	; 0x734 <DIO_SetPortValue+0xe0>
			{
			switch(PortNumber)
 6d0:	89 81       	ldd	r24, Y+1	; 0x01
 6d2:	28 2f       	mov	r18, r24
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	3c 83       	std	Y+4, r19	; 0x04
 6d8:	2b 83       	std	Y+3, r18	; 0x03
 6da:	8b 81       	ldd	r24, Y+3	; 0x03
 6dc:	9c 81       	ldd	r25, Y+4	; 0x04
 6de:	81 30       	cpi	r24, 0x01	; 1
 6e0:	91 05       	cpc	r25, r1
 6e2:	d1 f0       	breq	.+52     	; 0x718 <DIO_SetPortValue+0xc4>
 6e4:	2b 81       	ldd	r18, Y+3	; 0x03
 6e6:	3c 81       	ldd	r19, Y+4	; 0x04
 6e8:	22 30       	cpi	r18, 0x02	; 2
 6ea:	31 05       	cpc	r19, r1
 6ec:	2c f4       	brge	.+10     	; 0x6f8 <DIO_SetPortValue+0xa4>
 6ee:	8b 81       	ldd	r24, Y+3	; 0x03
 6f0:	9c 81       	ldd	r25, Y+4	; 0x04
 6f2:	00 97       	sbiw	r24, 0x00	; 0
 6f4:	61 f0       	breq	.+24     	; 0x70e <DIO_SetPortValue+0xba>
 6f6:	1e c0       	rjmp	.+60     	; 0x734 <DIO_SetPortValue+0xe0>
 6f8:	2b 81       	ldd	r18, Y+3	; 0x03
 6fa:	3c 81       	ldd	r19, Y+4	; 0x04
 6fc:	22 30       	cpi	r18, 0x02	; 2
 6fe:	31 05       	cpc	r19, r1
 700:	81 f0       	breq	.+32     	; 0x722 <DIO_SetPortValue+0xce>
 702:	8b 81       	ldd	r24, Y+3	; 0x03
 704:	9c 81       	ldd	r25, Y+4	; 0x04
 706:	83 30       	cpi	r24, 0x03	; 3
 708:	91 05       	cpc	r25, r1
 70a:	81 f0       	breq	.+32     	; 0x72c <DIO_SetPortValue+0xd8>
 70c:	13 c0       	rjmp	.+38     	; 0x734 <DIO_SetPortValue+0xe0>
			{
			case MY_PORTA:  Reg_PORTA=0xff;  break;
 70e:	eb e3       	ldi	r30, 0x3B	; 59
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	8f ef       	ldi	r24, 0xFF	; 255
 714:	80 83       	st	Z, r24
 716:	0e c0       	rjmp	.+28     	; 0x734 <DIO_SetPortValue+0xe0>
			case MY_PORTB:  Reg_PORTB=0xff;  break;
 718:	e8 e3       	ldi	r30, 0x38	; 56
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	8f ef       	ldi	r24, 0xFF	; 255
 71e:	80 83       	st	Z, r24
 720:	09 c0       	rjmp	.+18     	; 0x734 <DIO_SetPortValue+0xe0>
			case MY_PORTC:  Reg_PORTC=0xff;  break;
 722:	e5 e3       	ldi	r30, 0x35	; 53
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	8f ef       	ldi	r24, 0xFF	; 255
 728:	80 83       	st	Z, r24
 72a:	04 c0       	rjmp	.+8      	; 0x734 <DIO_SetPortValue+0xe0>
			case MY_PORTD:  Reg_PORTD=0xff;  break;
 72c:	e2 e3       	ldi	r30, 0x32	; 50
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	8f ef       	ldi	r24, 0xFF	; 255
 732:	80 83       	st	Z, r24
				}
			}
}
 734:	26 96       	adiw	r28, 0x06	; 6
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	cd bf       	out	0x3d, r28	; 61
 740:	cf 91       	pop	r28
 742:	df 91       	pop	r29
 744:	08 95       	ret

00000746 <UART_vidInit>:
 */
#include"STD_TYPES.h"
#include"Register.h"

void UART_vidInit(void)
{
 746:	df 93       	push	r29
 748:	cf 93       	push	r28
 74a:	cd b7       	in	r28, 0x3d	; 61
 74c:	de b7       	in	r29, 0x3e	; 62
	Reg_UBRRL=77;
 74e:	e9 e2       	ldi	r30, 0x29	; 41
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	8d e4       	ldi	r24, 0x4D	; 77
 754:	80 83       	st	Z, r24
	Reg_UBRRH=0;
 756:	e0 e4       	ldi	r30, 0x40	; 64
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	10 82       	st	Z, r1
	Reg_UCSRC=0b10000110;
 75c:	e0 e4       	ldi	r30, 0x40	; 64
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	86 e8       	ldi	r24, 0x86	; 134
 762:	80 83       	st	Z, r24
	Reg_UCSRB=0b00011000;
 764:	ea e2       	ldi	r30, 0x2A	; 42
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	88 e1       	ldi	r24, 0x18	; 24
 76a:	80 83       	st	Z, r24

}
 76c:	cf 91       	pop	r28
 76e:	df 91       	pop	r29
 770:	08 95       	ret

00000772 <UART_vidSendData>:

void UART_vidSendData(u8 Data)
{
 772:	df 93       	push	r29
 774:	cf 93       	push	r28
 776:	0f 92       	push	r0
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
 77c:	89 83       	std	Y+1, r24	; 0x01
	while(((Reg_UCSRA)&(1<<5))==0);
 77e:	eb e2       	ldi	r30, 0x2B	; 43
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	80 81       	ld	r24, Z
 784:	88 2f       	mov	r24, r24
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	80 72       	andi	r24, 0x20	; 32
 78a:	90 70       	andi	r25, 0x00	; 0
 78c:	00 97       	sbiw	r24, 0x00	; 0
 78e:	b9 f3       	breq	.-18     	; 0x77e <UART_vidSendData+0xc>
     Reg_UDR=Data;
 790:	ec e2       	ldi	r30, 0x2C	; 44
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	89 81       	ldd	r24, Y+1	; 0x01
 796:	80 83       	st	Z, r24
}
 798:	0f 90       	pop	r0
 79a:	cf 91       	pop	r28
 79c:	df 91       	pop	r29
 79e:	08 95       	ret

000007a0 <UART_u8ReciveData>:

u8 UART_u8ReciveData(void)
{
 7a0:	df 93       	push	r29
 7a2:	cf 93       	push	r28
 7a4:	0f 92       	push	r0
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
u8 retval;
while(((Reg_UCSRA)&(1<<7))==0);
 7aa:	eb e2       	ldi	r30, 0x2B	; 43
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 81       	ld	r24, Z
 7b0:	88 23       	and	r24, r24
 7b2:	dc f7       	brge	.-10     	; 0x7aa <UART_u8ReciveData+0xa>

	retval=Reg_UDR;
 7b4:	ec e2       	ldi	r30, 0x2C	; 44
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	80 81       	ld	r24, Z
 7ba:	89 83       	std	Y+1, r24	; 0x01
	return retval;
 7bc:	89 81       	ldd	r24, Y+1	; 0x01

}
 7be:	0f 90       	pop	r0
 7c0:	cf 91       	pop	r28
 7c2:	df 91       	pop	r29
 7c4:	08 95       	ret

000007c6 <main>:

#include"STD_TYPES.h"
#include"DIO.h"
#include"UART.h"
int main(void)
{
 7c6:	0f 93       	push	r16
 7c8:	1f 93       	push	r17
 7ca:	df 93       	push	r29
 7cc:	cf 93       	push	r28
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
 7d2:	62 97       	sbiw	r28, 0x12	; 18
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	f8 94       	cli
 7d8:	de bf       	out	0x3e, r29	; 62
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	cd bf       	out	0x3d, r28	; 61
	u8 name[10];
	u8 pass[4];
	u8 i=0;
 7de:	1a 82       	std	Y+2, r1	; 0x02
	u8 j=0;
 7e0:	19 82       	std	Y+1, r1	; 0x01
	DIO_SetPinDirection(MY_PORTD,PIN0,INPUT);
 7e2:	83 e0       	ldi	r24, 0x03	; 3
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	40 e0       	ldi	r20, 0x00	; 0
 7e8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(MY_PORTD,PIN1,OUTPUT);
 7ec:	83 e0       	ldi	r24, 0x03	; 3
 7ee:	61 e0       	ldi	r22, 0x01	; 1
 7f0:	41 e0       	ldi	r20, 0x01	; 1
 7f2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(MY_PORTA,PIN0,OUTPUT);
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	41 e0       	ldi	r20, 0x01	; 1
 7fc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(MY_PORTA,PIN1,OUTPUT);
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	61 e0       	ldi	r22, 0x01	; 1
 804:	41 e0       	ldi	r20, 0x01	; 1
 806:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>

	UART_vidInit();
 80a:	0e 94 a3 03 	call	0x746	; 0x746 <UART_vidInit>
 80e:	5e c0       	rjmp	.+188    	; 0x8cc <__stack+0x6d>
	while(1)
  {
		while(i<10)
	   {
		name[i]=UART_u8ReciveData();
 810:	8a 81       	ldd	r24, Y+2	; 0x02
 812:	08 2f       	mov	r16, r24
 814:	10 e0       	ldi	r17, 0x00	; 0
 816:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UART_u8ReciveData>
 81a:	28 2f       	mov	r18, r24
 81c:	ce 01       	movw	r24, r28
 81e:	03 96       	adiw	r24, 0x03	; 3
 820:	fc 01       	movw	r30, r24
 822:	e0 0f       	add	r30, r16
 824:	f1 1f       	adc	r31, r17
 826:	20 83       	st	Z, r18
		i++;
 828:	8a 81       	ldd	r24, Y+2	; 0x02
 82a:	8f 5f       	subi	r24, 0xFF	; 255
 82c:	8a 83       	std	Y+2, r24	; 0x02

		if((name[0]=='A')&&(name[1]=='m')&&(name[2]=='r'))
 82e:	8b 81       	ldd	r24, Y+3	; 0x03
 830:	81 34       	cpi	r24, 0x41	; 65
 832:	41 f4       	brne	.+16     	; 0x844 <main+0x7e>
 834:	8c 81       	ldd	r24, Y+4	; 0x04
 836:	8d 36       	cpi	r24, 0x6D	; 109
 838:	29 f4       	brne	.+10     	; 0x844 <main+0x7e>
 83a:	8d 81       	ldd	r24, Y+5	; 0x05
 83c:	82 37       	cpi	r24, 0x72	; 114
 83e:	11 f4       	brne	.+4      	; 0x844 <main+0x7e>
		        {
					i=10;
 840:	8a e0       	ldi	r24, 0x0A	; 10
 842:	8a 83       	std	Y+2, r24	; 0x02
		        }

        if((name[0]=='j')&&(name[1]=='o')&&(name[2]=='o'))
 844:	8b 81       	ldd	r24, Y+3	; 0x03
 846:	8a 36       	cpi	r24, 0x6A	; 106
 848:	41 f4       	brne	.+16     	; 0x85a <main+0x94>
 84a:	8c 81       	ldd	r24, Y+4	; 0x04
 84c:	8f 36       	cpi	r24, 0x6F	; 111
 84e:	29 f4       	brne	.+10     	; 0x85a <main+0x94>
 850:	8d 81       	ldd	r24, Y+5	; 0x05
 852:	8f 36       	cpi	r24, 0x6F	; 111
 854:	11 f4       	brne	.+4      	; 0x85a <main+0x94>
		        {
					i=10;
 856:	8a e0       	ldi	r24, 0x0A	; 10
 858:	8a 83       	std	Y+2, r24	; 0x02
		        }

        if((name[0]=='K')&&(name[1]=='a')&&(name[2]=='r')&&(name[3]=='e')&&(name[4]=='m'))
 85a:	8b 81       	ldd	r24, Y+3	; 0x03
 85c:	8b 34       	cpi	r24, 0x4B	; 75
 85e:	71 f4       	brne	.+28     	; 0x87c <__stack+0x1d>
 860:	8c 81       	ldd	r24, Y+4	; 0x04
 862:	81 36       	cpi	r24, 0x61	; 97
 864:	59 f4       	brne	.+22     	; 0x87c <__stack+0x1d>
 866:	8d 81       	ldd	r24, Y+5	; 0x05
 868:	82 37       	cpi	r24, 0x72	; 114
 86a:	41 f4       	brne	.+16     	; 0x87c <__stack+0x1d>
 86c:	8e 81       	ldd	r24, Y+6	; 0x06
 86e:	85 36       	cpi	r24, 0x65	; 101
 870:	29 f4       	brne	.+10     	; 0x87c <__stack+0x1d>
 872:	8f 81       	ldd	r24, Y+7	; 0x07
 874:	8d 36       	cpi	r24, 0x6D	; 109
 876:	11 f4       	brne	.+4      	; 0x87c <__stack+0x1d>
		        {
        	        i=10;
 878:	8a e0       	ldi	r24, 0x0A	; 10
 87a:	8a 83       	std	Y+2, r24	; 0x02
		        }

        if((name[0]=='A')&&(name[1]=='h')&&(name[2]=='m')&&(name[3]=='e')&&(name[4]=='d'))
 87c:	8b 81       	ldd	r24, Y+3	; 0x03
 87e:	81 34       	cpi	r24, 0x41	; 65
 880:	71 f4       	brne	.+28     	; 0x89e <__stack+0x3f>
 882:	8c 81       	ldd	r24, Y+4	; 0x04
 884:	88 36       	cpi	r24, 0x68	; 104
 886:	59 f4       	brne	.+22     	; 0x89e <__stack+0x3f>
 888:	8d 81       	ldd	r24, Y+5	; 0x05
 88a:	8d 36       	cpi	r24, 0x6D	; 109
 88c:	41 f4       	brne	.+16     	; 0x89e <__stack+0x3f>
 88e:	8e 81       	ldd	r24, Y+6	; 0x06
 890:	85 36       	cpi	r24, 0x65	; 101
 892:	29 f4       	brne	.+10     	; 0x89e <__stack+0x3f>
 894:	8f 81       	ldd	r24, Y+7	; 0x07
 896:	84 36       	cpi	r24, 0x64	; 100
 898:	11 f4       	brne	.+4      	; 0x89e <__stack+0x3f>
        	   {
          	        i=10;
 89a:	8a e0       	ldi	r24, 0x0A	; 10
 89c:	8a 83       	std	Y+2, r24	; 0x02
        	   }

        if((name[0]=='M')&&(name[1]=='o')&&(name[2]=='h')&&(name[3]=='a')&&(name[4]=='m')&&(name[5]=='e')&&(name[6]=='d'))
 89e:	8b 81       	ldd	r24, Y+3	; 0x03
 8a0:	8d 34       	cpi	r24, 0x4D	; 77
 8a2:	a1 f4       	brne	.+40     	; 0x8cc <__stack+0x6d>
 8a4:	8c 81       	ldd	r24, Y+4	; 0x04
 8a6:	8f 36       	cpi	r24, 0x6F	; 111
 8a8:	89 f4       	brne	.+34     	; 0x8cc <__stack+0x6d>
 8aa:	8d 81       	ldd	r24, Y+5	; 0x05
 8ac:	88 36       	cpi	r24, 0x68	; 104
 8ae:	71 f4       	brne	.+28     	; 0x8cc <__stack+0x6d>
 8b0:	8e 81       	ldd	r24, Y+6	; 0x06
 8b2:	81 36       	cpi	r24, 0x61	; 97
 8b4:	59 f4       	brne	.+22     	; 0x8cc <__stack+0x6d>
 8b6:	8f 81       	ldd	r24, Y+7	; 0x07
 8b8:	8d 36       	cpi	r24, 0x6D	; 109
 8ba:	41 f4       	brne	.+16     	; 0x8cc <__stack+0x6d>
 8bc:	88 85       	ldd	r24, Y+8	; 0x08
 8be:	85 36       	cpi	r24, 0x65	; 101
 8c0:	29 f4       	brne	.+10     	; 0x8cc <__stack+0x6d>
 8c2:	89 85       	ldd	r24, Y+9	; 0x09
 8c4:	84 36       	cpi	r24, 0x64	; 100
 8c6:	11 f4       	brne	.+4      	; 0x8cc <__stack+0x6d>
               {
                    i=10;
 8c8:	8a e0       	ldi	r24, 0x0A	; 10
 8ca:	8a 83       	std	Y+2, r24	; 0x02
	DIO_SetPinDirection(MY_PORTA,PIN1,OUTPUT);

	UART_vidInit();
	while(1)
  {
		while(i<10)
 8cc:	8a 81       	ldd	r24, Y+2	; 0x02
 8ce:	8a 30       	cpi	r24, 0x0A	; 10
 8d0:	08 f4       	brcc	.+2      	; 0x8d4 <__stack+0x75>
 8d2:	9e cf       	rjmp	.-196    	; 0x810 <main+0x4a>
                    i=10;
               }

	   }

		if((name[0]=='A')&&(name[1]=='m')&&(name[2]=='r'))
 8d4:	8b 81       	ldd	r24, Y+3	; 0x03
 8d6:	81 34       	cpi	r24, 0x41	; 65
 8d8:	09 f0       	breq	.+2      	; 0x8dc <__stack+0x7d>
 8da:	3d c0       	rjmp	.+122    	; 0x956 <__stack+0xf7>
 8dc:	8c 81       	ldd	r24, Y+4	; 0x04
 8de:	8d 36       	cpi	r24, 0x6D	; 109
 8e0:	d1 f5       	brne	.+116    	; 0x956 <__stack+0xf7>
 8e2:	8d 81       	ldd	r24, Y+5	; 0x05
 8e4:	82 37       	cpi	r24, 0x72	; 114
 8e6:	b9 f5       	brne	.+110    	; 0x956 <__stack+0xf7>
 8e8:	33 c0       	rjmp	.+102    	; 0x950 <__stack+0xf1>
		{
			while(j<=2)
			{
				i=0;
 8ea:	1a 82       	std	Y+2, r1	; 0x02
 8ec:	0f c0       	rjmp	.+30     	; 0x90c <__stack+0xad>
						while(i<4)
								{
								pass[i]=UART_u8ReciveData();
 8ee:	8a 81       	ldd	r24, Y+2	; 0x02
 8f0:	08 2f       	mov	r16, r24
 8f2:	10 e0       	ldi	r17, 0x00	; 0
 8f4:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UART_u8ReciveData>
 8f8:	28 2f       	mov	r18, r24
 8fa:	ce 01       	movw	r24, r28
 8fc:	0d 96       	adiw	r24, 0x0d	; 13
 8fe:	fc 01       	movw	r30, r24
 900:	e0 0f       	add	r30, r16
 902:	f1 1f       	adc	r31, r17
 904:	20 83       	st	Z, r18
								i++;
 906:	8a 81       	ldd	r24, Y+2	; 0x02
 908:	8f 5f       	subi	r24, 0xFF	; 255
 90a:	8a 83       	std	Y+2, r24	; 0x02
		if((name[0]=='A')&&(name[1]=='m')&&(name[2]=='r'))
		{
			while(j<=2)
			{
				i=0;
						while(i<4)
 90c:	8a 81       	ldd	r24, Y+2	; 0x02
 90e:	84 30       	cpi	r24, 0x04	; 4
 910:	70 f3       	brcs	.-36     	; 0x8ee <__stack+0x8f>
								{
								pass[i]=UART_u8ReciveData();
								i++;
								}

						if((pass[0]=='0')&&(pass[1]=='0')&&(pass[2]=='0')&&(pass[3]=='0'))
 912:	8d 85       	ldd	r24, Y+13	; 0x0d
 914:	80 33       	cpi	r24, 0x30	; 48
 916:	89 f4       	brne	.+34     	; 0x93a <__stack+0xdb>
 918:	8e 85       	ldd	r24, Y+14	; 0x0e
 91a:	80 33       	cpi	r24, 0x30	; 48
 91c:	71 f4       	brne	.+28     	; 0x93a <__stack+0xdb>
 91e:	8f 85       	ldd	r24, Y+15	; 0x0f
 920:	80 33       	cpi	r24, 0x30	; 48
 922:	59 f4       	brne	.+22     	; 0x93a <__stack+0xdb>
 924:	88 89       	ldd	r24, Y+16	; 0x10
 926:	80 33       	cpi	r24, 0x30	; 48
 928:	41 f4       	brne	.+16     	; 0x93a <__stack+0xdb>
						{
								DIO_SetPinValue(MY_PORTA,PIN0,HIGH);
 92a:	80 e0       	ldi	r24, 0x00	; 0
 92c:	60 e0       	ldi	r22, 0x00	; 0
 92e:	41 e0       	ldi	r20, 0x01	; 1
 930:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_SetPinValue>
								return 0;
 934:	1a 8a       	std	Y+18, r1	; 0x12
 936:	19 8a       	std	Y+17, r1	; 0x11
 938:	44 c1       	rjmp	.+648    	; 0xbc2 <__stack+0x363>
						}

						if(j==2)
 93a:	89 81       	ldd	r24, Y+1	; 0x01
 93c:	82 30       	cpi	r24, 0x02	; 2
 93e:	29 f4       	brne	.+10     	; 0x94a <__stack+0xeb>
						{
							    DIO_SetPinValue(MY_PORTA,PIN1,HIGH);
 940:	80 e0       	ldi	r24, 0x00	; 0
 942:	61 e0       	ldi	r22, 0x01	; 1
 944:	41 e0       	ldi	r20, 0x01	; 1
 946:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_SetPinValue>
						}
				j++;
 94a:	89 81       	ldd	r24, Y+1	; 0x01
 94c:	8f 5f       	subi	r24, 0xFF	; 255
 94e:	89 83       	std	Y+1, r24	; 0x01

	   }

		if((name[0]=='A')&&(name[1]=='m')&&(name[2]=='r'))
		{
			while(j<=2)
 950:	89 81       	ldd	r24, Y+1	; 0x01
 952:	83 30       	cpi	r24, 0x03	; 3
 954:	50 f2       	brcs	.-108    	; 0x8ea <__stack+0x8b>
						}
				j++;
			}
		}

		if((name[0]=='j')&&(name[1]=='o')&&(name[2]=='o'))
 956:	8b 81       	ldd	r24, Y+3	; 0x03
 958:	8a 36       	cpi	r24, 0x6A	; 106
 95a:	09 f0       	breq	.+2      	; 0x95e <__stack+0xff>
 95c:	41 c0       	rjmp	.+130    	; 0x9e0 <__stack+0x181>
 95e:	8c 81       	ldd	r24, Y+4	; 0x04
 960:	8f 36       	cpi	r24, 0x6F	; 111
 962:	09 f0       	breq	.+2      	; 0x966 <__stack+0x107>
 964:	3d c0       	rjmp	.+122    	; 0x9e0 <__stack+0x181>
 966:	8d 81       	ldd	r24, Y+5	; 0x05
 968:	8f 36       	cpi	r24, 0x6F	; 111
 96a:	d1 f5       	brne	.+116    	; 0x9e0 <__stack+0x181>
 96c:	36 c0       	rjmp	.+108    	; 0x9da <__stack+0x17b>
		{
			while(j<3)
			{
					i=0;
 96e:	1a 82       	std	Y+2, r1	; 0x02
 970:	0f c0       	rjmp	.+30     	; 0x990 <__stack+0x131>
						while(i<4)
								{
								pass[i]=UART_u8ReciveData();
 972:	8a 81       	ldd	r24, Y+2	; 0x02
 974:	08 2f       	mov	r16, r24
 976:	10 e0       	ldi	r17, 0x00	; 0
 978:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UART_u8ReciveData>
 97c:	28 2f       	mov	r18, r24
 97e:	ce 01       	movw	r24, r28
 980:	0d 96       	adiw	r24, 0x0d	; 13
 982:	fc 01       	movw	r30, r24
 984:	e0 0f       	add	r30, r16
 986:	f1 1f       	adc	r31, r17
 988:	20 83       	st	Z, r18
								i++;
 98a:	8a 81       	ldd	r24, Y+2	; 0x02
 98c:	8f 5f       	subi	r24, 0xFF	; 255
 98e:	8a 83       	std	Y+2, r24	; 0x02
		if((name[0]=='j')&&(name[1]=='o')&&(name[2]=='o'))
		{
			while(j<3)
			{
					i=0;
						while(i<4)
 990:	8a 81       	ldd	r24, Y+2	; 0x02
 992:	84 30       	cpi	r24, 0x04	; 4
 994:	70 f3       	brcs	.-36     	; 0x972 <__stack+0x113>
								{
								pass[i]=UART_u8ReciveData();
								i++;
								}

						if((pass[0]=='1')&&(pass[1]=='1')&&(pass[2]=='1')&&(pass[3]=='1'))
 996:	8d 85       	ldd	r24, Y+13	; 0x0d
 998:	81 33       	cpi	r24, 0x31	; 49
 99a:	89 f4       	brne	.+34     	; 0x9be <__stack+0x15f>
 99c:	8e 85       	ldd	r24, Y+14	; 0x0e
 99e:	81 33       	cpi	r24, 0x31	; 49
 9a0:	71 f4       	brne	.+28     	; 0x9be <__stack+0x15f>
 9a2:	8f 85       	ldd	r24, Y+15	; 0x0f
 9a4:	81 33       	cpi	r24, 0x31	; 49
 9a6:	59 f4       	brne	.+22     	; 0x9be <__stack+0x15f>
 9a8:	88 89       	ldd	r24, Y+16	; 0x10
 9aa:	81 33       	cpi	r24, 0x31	; 49
 9ac:	41 f4       	brne	.+16     	; 0x9be <__stack+0x15f>
						{
								DIO_SetPinValue(MY_PORTA,PIN0,HIGH);
 9ae:	80 e0       	ldi	r24, 0x00	; 0
 9b0:	60 e0       	ldi	r22, 0x00	; 0
 9b2:	41 e0       	ldi	r20, 0x01	; 1
 9b4:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_SetPinValue>
								return 0;
 9b8:	1a 8a       	std	Y+18, r1	; 0x12
 9ba:	19 8a       	std	Y+17, r1	; 0x11
 9bc:	02 c1       	rjmp	.+516    	; 0xbc2 <__stack+0x363>
						}

						if(j==3)
 9be:	89 81       	ldd	r24, Y+1	; 0x01
 9c0:	83 30       	cpi	r24, 0x03	; 3
 9c2:	41 f4       	brne	.+16     	; 0x9d4 <__stack+0x175>
						{
							    DIO_SetPinValue(MY_PORTA,PIN1,HIGH);
 9c4:	80 e0       	ldi	r24, 0x00	; 0
 9c6:	61 e0       	ldi	r22, 0x01	; 1
 9c8:	41 e0       	ldi	r20, 0x01	; 1
 9ca:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_SetPinValue>
							    return 0;
 9ce:	1a 8a       	std	Y+18, r1	; 0x12
 9d0:	19 8a       	std	Y+17, r1	; 0x11
 9d2:	f7 c0       	rjmp	.+494    	; 0xbc2 <__stack+0x363>
						}
					j++;
 9d4:	89 81       	ldd	r24, Y+1	; 0x01
 9d6:	8f 5f       	subi	r24, 0xFF	; 255
 9d8:	89 83       	std	Y+1, r24	; 0x01
			}
		}

		if((name[0]=='j')&&(name[1]=='o')&&(name[2]=='o'))
		{
			while(j<3)
 9da:	89 81       	ldd	r24, Y+1	; 0x01
 9dc:	83 30       	cpi	r24, 0x03	; 3
 9de:	38 f2       	brcs	.-114    	; 0x96e <__stack+0x10f>
						}
					j++;
				}
		}

		 if((name[0]=='K')&&(name[1]=='a')&&(name[2]=='r')&&(name[3]=='e')&&(name[4]=='m'))
 9e0:	8b 81       	ldd	r24, Y+3	; 0x03
 9e2:	8b 34       	cpi	r24, 0x4B	; 75
 9e4:	09 f0       	breq	.+2      	; 0x9e8 <__stack+0x189>
 9e6:	49 c0       	rjmp	.+146    	; 0xa7a <__stack+0x21b>
 9e8:	8c 81       	ldd	r24, Y+4	; 0x04
 9ea:	81 36       	cpi	r24, 0x61	; 97
 9ec:	09 f0       	breq	.+2      	; 0x9f0 <__stack+0x191>
 9ee:	45 c0       	rjmp	.+138    	; 0xa7a <__stack+0x21b>
 9f0:	8d 81       	ldd	r24, Y+5	; 0x05
 9f2:	82 37       	cpi	r24, 0x72	; 114
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <__stack+0x199>
 9f6:	41 c0       	rjmp	.+130    	; 0xa7a <__stack+0x21b>
 9f8:	8e 81       	ldd	r24, Y+6	; 0x06
 9fa:	85 36       	cpi	r24, 0x65	; 101
 9fc:	09 f0       	breq	.+2      	; 0xa00 <__stack+0x1a1>
 9fe:	3d c0       	rjmp	.+122    	; 0xa7a <__stack+0x21b>
 a00:	8f 81       	ldd	r24, Y+7	; 0x07
 a02:	8d 36       	cpi	r24, 0x6D	; 109
 a04:	d1 f5       	brne	.+116    	; 0xa7a <__stack+0x21b>
 a06:	36 c0       	rjmp	.+108    	; 0xa74 <__stack+0x215>
		 {
			 while(j<3)
			 {
			 		i=0;
 a08:	1a 82       	std	Y+2, r1	; 0x02
 a0a:	0f c0       	rjmp	.+30     	; 0xa2a <__stack+0x1cb>
			 			while(i<4)
			 					{
			 					pass[i]=UART_u8ReciveData();
 a0c:	8a 81       	ldd	r24, Y+2	; 0x02
 a0e:	08 2f       	mov	r16, r24
 a10:	10 e0       	ldi	r17, 0x00	; 0
 a12:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UART_u8ReciveData>
 a16:	28 2f       	mov	r18, r24
 a18:	ce 01       	movw	r24, r28
 a1a:	0d 96       	adiw	r24, 0x0d	; 13
 a1c:	fc 01       	movw	r30, r24
 a1e:	e0 0f       	add	r30, r16
 a20:	f1 1f       	adc	r31, r17
 a22:	20 83       	st	Z, r18
			 					i++;
 a24:	8a 81       	ldd	r24, Y+2	; 0x02
 a26:	8f 5f       	subi	r24, 0xFF	; 255
 a28:	8a 83       	std	Y+2, r24	; 0x02
		 if((name[0]=='K')&&(name[1]=='a')&&(name[2]=='r')&&(name[3]=='e')&&(name[4]=='m'))
		 {
			 while(j<3)
			 {
			 		i=0;
			 			while(i<4)
 a2a:	8a 81       	ldd	r24, Y+2	; 0x02
 a2c:	84 30       	cpi	r24, 0x04	; 4
 a2e:	70 f3       	brcs	.-36     	; 0xa0c <__stack+0x1ad>
			 					{
			 					pass[i]=UART_u8ReciveData();
			 					i++;
			 					}

			 			if((pass[0]=='2')&&(pass[1]=='2')&&(pass[2]=='2')&&(pass[3]=='2'))
 a30:	8d 85       	ldd	r24, Y+13	; 0x0d
 a32:	82 33       	cpi	r24, 0x32	; 50
 a34:	89 f4       	brne	.+34     	; 0xa58 <__stack+0x1f9>
 a36:	8e 85       	ldd	r24, Y+14	; 0x0e
 a38:	82 33       	cpi	r24, 0x32	; 50
 a3a:	71 f4       	brne	.+28     	; 0xa58 <__stack+0x1f9>
 a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
 a3e:	82 33       	cpi	r24, 0x32	; 50
 a40:	59 f4       	brne	.+22     	; 0xa58 <__stack+0x1f9>
 a42:	88 89       	ldd	r24, Y+16	; 0x10
 a44:	82 33       	cpi	r24, 0x32	; 50
 a46:	41 f4       	brne	.+16     	; 0xa58 <__stack+0x1f9>
			 			{
			 					DIO_SetPinValue(MY_PORTA,PIN0,HIGH);
 a48:	80 e0       	ldi	r24, 0x00	; 0
 a4a:	60 e0       	ldi	r22, 0x00	; 0
 a4c:	41 e0       	ldi	r20, 0x01	; 1
 a4e:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_SetPinValue>
			 					return 0;
 a52:	1a 8a       	std	Y+18, r1	; 0x12
 a54:	19 8a       	std	Y+17, r1	; 0x11
 a56:	b5 c0       	rjmp	.+362    	; 0xbc2 <__stack+0x363>
			 			}

			 			if(j==3)
 a58:	89 81       	ldd	r24, Y+1	; 0x01
 a5a:	83 30       	cpi	r24, 0x03	; 3
 a5c:	41 f4       	brne	.+16     	; 0xa6e <__stack+0x20f>
			 			{
			 				    DIO_SetPinValue(MY_PORTA,PIN1,HIGH);
 a5e:	80 e0       	ldi	r24, 0x00	; 0
 a60:	61 e0       	ldi	r22, 0x01	; 1
 a62:	41 e0       	ldi	r20, 0x01	; 1
 a64:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_SetPinValue>
			 				   return 0;
 a68:	1a 8a       	std	Y+18, r1	; 0x12
 a6a:	19 8a       	std	Y+17, r1	; 0x11
 a6c:	aa c0       	rjmp	.+340    	; 0xbc2 <__stack+0x363>
			 			}
			 		j++;
 a6e:	89 81       	ldd	r24, Y+1	; 0x01
 a70:	8f 5f       	subi	r24, 0xFF	; 255
 a72:	89 83       	std	Y+1, r24	; 0x01
				}
		}

		 if((name[0]=='K')&&(name[1]=='a')&&(name[2]=='r')&&(name[3]=='e')&&(name[4]=='m'))
		 {
			 while(j<3)
 a74:	89 81       	ldd	r24, Y+1	; 0x01
 a76:	83 30       	cpi	r24, 0x03	; 3
 a78:	38 f2       	brcs	.-114    	; 0xa08 <__stack+0x1a9>
			 			}
			 		j++;
			 	}
		 }

		 if((name[0]=='A')&&(name[1]=='h')&&(name[2]=='m')&&(name[3]=='e')&&(name[4]=='d'))
 a7a:	8b 81       	ldd	r24, Y+3	; 0x03
 a7c:	81 34       	cpi	r24, 0x41	; 65
 a7e:	09 f0       	breq	.+2      	; 0xa82 <__stack+0x223>
 a80:	49 c0       	rjmp	.+146    	; 0xb14 <__stack+0x2b5>
 a82:	8c 81       	ldd	r24, Y+4	; 0x04
 a84:	88 36       	cpi	r24, 0x68	; 104
 a86:	09 f0       	breq	.+2      	; 0xa8a <__stack+0x22b>
 a88:	45 c0       	rjmp	.+138    	; 0xb14 <__stack+0x2b5>
 a8a:	8d 81       	ldd	r24, Y+5	; 0x05
 a8c:	8d 36       	cpi	r24, 0x6D	; 109
 a8e:	09 f0       	breq	.+2      	; 0xa92 <__stack+0x233>
 a90:	41 c0       	rjmp	.+130    	; 0xb14 <__stack+0x2b5>
 a92:	8e 81       	ldd	r24, Y+6	; 0x06
 a94:	85 36       	cpi	r24, 0x65	; 101
 a96:	09 f0       	breq	.+2      	; 0xa9a <__stack+0x23b>
 a98:	3d c0       	rjmp	.+122    	; 0xb14 <__stack+0x2b5>
 a9a:	8f 81       	ldd	r24, Y+7	; 0x07
 a9c:	84 36       	cpi	r24, 0x64	; 100
 a9e:	d1 f5       	brne	.+116    	; 0xb14 <__stack+0x2b5>
 aa0:	36 c0       	rjmp	.+108    	; 0xb0e <__stack+0x2af>
		 {
			 while(j<3)
			 {
			 		i=0;
 aa2:	1a 82       	std	Y+2, r1	; 0x02
 aa4:	0f c0       	rjmp	.+30     	; 0xac4 <__stack+0x265>
			 			while(i<4)
			 					{
			 					pass[i]=UART_u8ReciveData();
 aa6:	8a 81       	ldd	r24, Y+2	; 0x02
 aa8:	08 2f       	mov	r16, r24
 aaa:	10 e0       	ldi	r17, 0x00	; 0
 aac:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UART_u8ReciveData>
 ab0:	28 2f       	mov	r18, r24
 ab2:	ce 01       	movw	r24, r28
 ab4:	0d 96       	adiw	r24, 0x0d	; 13
 ab6:	fc 01       	movw	r30, r24
 ab8:	e0 0f       	add	r30, r16
 aba:	f1 1f       	adc	r31, r17
 abc:	20 83       	st	Z, r18
			 					i++;
 abe:	8a 81       	ldd	r24, Y+2	; 0x02
 ac0:	8f 5f       	subi	r24, 0xFF	; 255
 ac2:	8a 83       	std	Y+2, r24	; 0x02
		 if((name[0]=='A')&&(name[1]=='h')&&(name[2]=='m')&&(name[3]=='e')&&(name[4]=='d'))
		 {
			 while(j<3)
			 {
			 		i=0;
			 			while(i<4)
 ac4:	8a 81       	ldd	r24, Y+2	; 0x02
 ac6:	84 30       	cpi	r24, 0x04	; 4
 ac8:	70 f3       	brcs	.-36     	; 0xaa6 <__stack+0x247>
			 					{
			 					pass[i]=UART_u8ReciveData();
			 					i++;
			 					}

			 			if((pass[0]=='3')&&(pass[1]=='3')&&(pass[2]=='3')&&(pass[3]=='3'))
 aca:	8d 85       	ldd	r24, Y+13	; 0x0d
 acc:	83 33       	cpi	r24, 0x33	; 51
 ace:	89 f4       	brne	.+34     	; 0xaf2 <__stack+0x293>
 ad0:	8e 85       	ldd	r24, Y+14	; 0x0e
 ad2:	83 33       	cpi	r24, 0x33	; 51
 ad4:	71 f4       	brne	.+28     	; 0xaf2 <__stack+0x293>
 ad6:	8f 85       	ldd	r24, Y+15	; 0x0f
 ad8:	83 33       	cpi	r24, 0x33	; 51
 ada:	59 f4       	brne	.+22     	; 0xaf2 <__stack+0x293>
 adc:	88 89       	ldd	r24, Y+16	; 0x10
 ade:	83 33       	cpi	r24, 0x33	; 51
 ae0:	41 f4       	brne	.+16     	; 0xaf2 <__stack+0x293>
			 			{
			 					DIO_SetPinValue(MY_PORTA,PIN0,HIGH);
 ae2:	80 e0       	ldi	r24, 0x00	; 0
 ae4:	60 e0       	ldi	r22, 0x00	; 0
 ae6:	41 e0       	ldi	r20, 0x01	; 1
 ae8:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_SetPinValue>
			 					return 0;
 aec:	1a 8a       	std	Y+18, r1	; 0x12
 aee:	19 8a       	std	Y+17, r1	; 0x11
 af0:	68 c0       	rjmp	.+208    	; 0xbc2 <__stack+0x363>
			 			}

			 			if(j==3)
 af2:	89 81       	ldd	r24, Y+1	; 0x01
 af4:	83 30       	cpi	r24, 0x03	; 3
 af6:	41 f4       	brne	.+16     	; 0xb08 <__stack+0x2a9>
			 			{
			 				    DIO_SetPinValue(MY_PORTA,PIN1,HIGH);
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	61 e0       	ldi	r22, 0x01	; 1
 afc:	41 e0       	ldi	r20, 0x01	; 1
 afe:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_SetPinValue>
			 				   return 0;
 b02:	1a 8a       	std	Y+18, r1	; 0x12
 b04:	19 8a       	std	Y+17, r1	; 0x11
 b06:	5d c0       	rjmp	.+186    	; 0xbc2 <__stack+0x363>
			 			}
			 		j++;
 b08:	89 81       	ldd	r24, Y+1	; 0x01
 b0a:	8f 5f       	subi	r24, 0xFF	; 255
 b0c:	89 83       	std	Y+1, r24	; 0x01
			 	}
		 }

		 if((name[0]=='A')&&(name[1]=='h')&&(name[2]=='m')&&(name[3]=='e')&&(name[4]=='d'))
		 {
			 while(j<3)
 b0e:	89 81       	ldd	r24, Y+1	; 0x01
 b10:	83 30       	cpi	r24, 0x03	; 3
 b12:	38 f2       	brcs	.-114    	; 0xaa2 <__stack+0x243>
			 			}
			 		j++;
		   	}
		 }

		 if((name[0]=='M')&&(name[1]=='o')&&(name[2]=='h')&&(name[3]=='a')&&(name[4]=='m')&&(name[5]=='e')&&(name[6]=='d'))
 b14:	8b 81       	ldd	r24, Y+3	; 0x03
 b16:	8d 34       	cpi	r24, 0x4D	; 77
 b18:	09 f0       	breq	.+2      	; 0xb1c <__stack+0x2bd>
 b1a:	d8 ce       	rjmp	.-592    	; 0x8cc <__stack+0x6d>
 b1c:	8c 81       	ldd	r24, Y+4	; 0x04
 b1e:	8f 36       	cpi	r24, 0x6F	; 111
 b20:	09 f0       	breq	.+2      	; 0xb24 <__stack+0x2c5>
 b22:	d4 ce       	rjmp	.-600    	; 0x8cc <__stack+0x6d>
 b24:	8d 81       	ldd	r24, Y+5	; 0x05
 b26:	88 36       	cpi	r24, 0x68	; 104
 b28:	09 f0       	breq	.+2      	; 0xb2c <__stack+0x2cd>
 b2a:	d0 ce       	rjmp	.-608    	; 0x8cc <__stack+0x6d>
 b2c:	8e 81       	ldd	r24, Y+6	; 0x06
 b2e:	81 36       	cpi	r24, 0x61	; 97
 b30:	09 f0       	breq	.+2      	; 0xb34 <__stack+0x2d5>
 b32:	cc ce       	rjmp	.-616    	; 0x8cc <__stack+0x6d>
 b34:	8f 81       	ldd	r24, Y+7	; 0x07
 b36:	8d 36       	cpi	r24, 0x6D	; 109
 b38:	09 f0       	breq	.+2      	; 0xb3c <__stack+0x2dd>
 b3a:	c8 ce       	rjmp	.-624    	; 0x8cc <__stack+0x6d>
 b3c:	88 85       	ldd	r24, Y+8	; 0x08
 b3e:	85 36       	cpi	r24, 0x65	; 101
 b40:	09 f0       	breq	.+2      	; 0xb44 <__stack+0x2e5>
 b42:	c4 ce       	rjmp	.-632    	; 0x8cc <__stack+0x6d>
 b44:	89 85       	ldd	r24, Y+9	; 0x09
 b46:	84 36       	cpi	r24, 0x64	; 100
 b48:	09 f0       	breq	.+2      	; 0xb4c <__stack+0x2ed>
 b4a:	c0 ce       	rjmp	.-640    	; 0x8cc <__stack+0x6d>
 b4c:	36 c0       	rjmp	.+108    	; 0xbba <__stack+0x35b>
		 {
			 while(j<3)
			 {
			 			i=0;
 b4e:	1a 82       	std	Y+2, r1	; 0x02
 b50:	0f c0       	rjmp	.+30     	; 0xb70 <__stack+0x311>
			 			while(i<4)
			 					{
			 					pass[i]=UART_u8ReciveData();
 b52:	8a 81       	ldd	r24, Y+2	; 0x02
 b54:	08 2f       	mov	r16, r24
 b56:	10 e0       	ldi	r17, 0x00	; 0
 b58:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UART_u8ReciveData>
 b5c:	28 2f       	mov	r18, r24
 b5e:	ce 01       	movw	r24, r28
 b60:	0d 96       	adiw	r24, 0x0d	; 13
 b62:	fc 01       	movw	r30, r24
 b64:	e0 0f       	add	r30, r16
 b66:	f1 1f       	adc	r31, r17
 b68:	20 83       	st	Z, r18
			 					i++;
 b6a:	8a 81       	ldd	r24, Y+2	; 0x02
 b6c:	8f 5f       	subi	r24, 0xFF	; 255
 b6e:	8a 83       	std	Y+2, r24	; 0x02
		 if((name[0]=='M')&&(name[1]=='o')&&(name[2]=='h')&&(name[3]=='a')&&(name[4]=='m')&&(name[5]=='e')&&(name[6]=='d'))
		 {
			 while(j<3)
			 {
			 			i=0;
			 			while(i<4)
 b70:	8a 81       	ldd	r24, Y+2	; 0x02
 b72:	84 30       	cpi	r24, 0x04	; 4
 b74:	70 f3       	brcs	.-36     	; 0xb52 <__stack+0x2f3>
			 					{
			 					pass[i]=UART_u8ReciveData();
			 					i++;
			 					}

			 			if((pass[0]=='4')&&(pass[1]=='4')&&(pass[2]=='4')&&(pass[3]=='4'))
 b76:	8d 85       	ldd	r24, Y+13	; 0x0d
 b78:	84 33       	cpi	r24, 0x34	; 52
 b7a:	89 f4       	brne	.+34     	; 0xb9e <__stack+0x33f>
 b7c:	8e 85       	ldd	r24, Y+14	; 0x0e
 b7e:	84 33       	cpi	r24, 0x34	; 52
 b80:	71 f4       	brne	.+28     	; 0xb9e <__stack+0x33f>
 b82:	8f 85       	ldd	r24, Y+15	; 0x0f
 b84:	84 33       	cpi	r24, 0x34	; 52
 b86:	59 f4       	brne	.+22     	; 0xb9e <__stack+0x33f>
 b88:	88 89       	ldd	r24, Y+16	; 0x10
 b8a:	84 33       	cpi	r24, 0x34	; 52
 b8c:	41 f4       	brne	.+16     	; 0xb9e <__stack+0x33f>
			 			{
			 					DIO_SetPinValue(MY_PORTA,PIN0,HIGH);
 b8e:	80 e0       	ldi	r24, 0x00	; 0
 b90:	60 e0       	ldi	r22, 0x00	; 0
 b92:	41 e0       	ldi	r20, 0x01	; 1
 b94:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_SetPinValue>
			 					return 0;
 b98:	1a 8a       	std	Y+18, r1	; 0x12
 b9a:	19 8a       	std	Y+17, r1	; 0x11
 b9c:	12 c0       	rjmp	.+36     	; 0xbc2 <__stack+0x363>
			 			}

			 			if(j==3)
 b9e:	89 81       	ldd	r24, Y+1	; 0x01
 ba0:	83 30       	cpi	r24, 0x03	; 3
 ba2:	41 f4       	brne	.+16     	; 0xbb4 <__stack+0x355>
			 			{
			 				    DIO_SetPinValue(MY_PORTA,PIN1,HIGH);
 ba4:	80 e0       	ldi	r24, 0x00	; 0
 ba6:	61 e0       	ldi	r22, 0x01	; 1
 ba8:	41 e0       	ldi	r20, 0x01	; 1
 baa:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_SetPinValue>
			 				   return 0;
 bae:	1a 8a       	std	Y+18, r1	; 0x12
 bb0:	19 8a       	std	Y+17, r1	; 0x11
 bb2:	07 c0       	rjmp	.+14     	; 0xbc2 <__stack+0x363>
			 			}
			 		j++;
 bb4:	89 81       	ldd	r24, Y+1	; 0x01
 bb6:	8f 5f       	subi	r24, 0xFF	; 255
 bb8:	89 83       	std	Y+1, r24	; 0x01
		   	}
		 }

		 if((name[0]=='M')&&(name[1]=='o')&&(name[2]=='h')&&(name[3]=='a')&&(name[4]=='m')&&(name[5]=='e')&&(name[6]=='d'))
		 {
			 while(j<3)
 bba:	89 81       	ldd	r24, Y+1	; 0x01
 bbc:	83 30       	cpi	r24, 0x03	; 3
 bbe:	38 f2       	brcs	.-114    	; 0xb4e <__stack+0x2ef>
 bc0:	85 ce       	rjmp	.-758    	; 0x8cc <__stack+0x6d>
			 			}
			 		j++;
			 }
		 }

	}
 bc2:	89 89       	ldd	r24, Y+17	; 0x11
 bc4:	9a 89       	ldd	r25, Y+18	; 0x12
}
 bc6:	62 96       	adiw	r28, 0x12	; 18
 bc8:	0f b6       	in	r0, 0x3f	; 63
 bca:	f8 94       	cli
 bcc:	de bf       	out	0x3e, r29	; 62
 bce:	0f be       	out	0x3f, r0	; 63
 bd0:	cd bf       	out	0x3d, r28	; 61
 bd2:	cf 91       	pop	r28
 bd4:	df 91       	pop	r29
 bd6:	1f 91       	pop	r17
 bd8:	0f 91       	pop	r16
 bda:	08 95       	ret

00000bdc <_exit>:
 bdc:	f8 94       	cli

00000bde <__stop_program>:
 bde:	ff cf       	rjmp	.-2      	; 0xbde <__stop_program>
